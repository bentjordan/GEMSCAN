'''
Joint variant calling with GATK HaplotypeCaller, Google DeepVariant and Illumina Strelka2. 

Notes:
    This pipeline is for use with the production germline pipeline.
    Therefore, some things are assumed, e.g. that input bams are indexed,
    that the reference genome is appropriately indexed, etc.  The pipeline
    will halt if these assumptions are not true, but there are no rules
    to perform these tasks.

Input:
    Customized config.yaml, sorted/indexed bams

Output:
    Merged multi-sample VCFs, one called with HaplotypeCaller, one
    called with DeepVariant, and one called with Strelka2

'''


import os
import subprocess
import glob
from pathlib import Path
from datetime import datetime


# reference the config file
configfile: "../config/config.yaml"
report: 'report/workflow.rst'
    
# import variables from the config file
hc_mode = config['runMode']['haplotypeCaller']
dv_mode = config['runMode']['deepVariant']
strelka2_mode = config['runMode']['streka2']
har_mode = config['runMode']['harmonize']
har_mode_only = har_mode and not (hc_mode or dv_mode or strelka2_mode)

refGenome = config['refGenome']
#snakePath = config['snakePath'].rstrip('/') + '/'
bedFile = config['bedFile']
strelkaVCF = config['strelkaVCF']
haplotypecallerVCF = config['haplotypecallerVCF']
deepvariantVCF = config['deepvariantVCF']

by_chrom = config['by_chrom']
threads = config['threads']
clusterMode = config['clusterMode']
outputDir = config['outputDir']
useRemoteFiles = config['useRemoteFiles']
glnexus_memGB =  config['glnexus_memGB']

if clusterMode == "gcp" or useRemoteFiles:
    from snakemake.remote.GS import RemoteProvider as GSRemoteProvider
    GS = GSRemoteProvider()

if clusterMode == "cluster":
   outputDir = "./"

    
#including the common functions
include: "rules/common.smk"    


if dv_mode:
    #modelPath = config['modelPath']
    #useShards = config['useShards']
    glnexus_dv_config = config['glnexus_dv_config']
    model_type = config['model_type']
    dv_memGB = config['dv_memGB']

if strelka2_mode:
    bedFileGZ = config['bedFileGZ']
    glnexus_strelka2_config = config['glnexus_strelka2_config']
    exome_param = config['exome_param']
    strelka2_memGB = config['strelka2_memGB']

if hc_mode:
    glnexus_gatk_config = config['glnexus_gatk_config']
    

CALLERS = ['HC', 'DV', 'strelka2']  # used in harmonize module

# derive additional refgenome variables
refFile = os.path.basename(refGenome)
refDir = os.path.dirname(refGenome)
refNoExt = os.path.splitext(refFile)[0]
dictionaryFile = refDir + '/' + refNoExt + '.dict'
#dictionaryFile = config['dictionaryFile']

# set a datetime stamp for GATK DBImport step
dt = str(datetime.now().strftime("%y-%m-%d-%H-%M"))
#dt = str(config['dt'])

#NOTUSED
#get the list of bam files, assuming that .bai are in the same folder
#bamList = get_samples("../config/samples.txt")
# generate sampleList based on bam filenames and then we generate the sample to bam dict
#sampleList = [os.path.splitext(os.path.basename(f))[0] for f in bamList]
#sample2bam = dict(zip(sampleList, bamList))
# generate sample names list from bam SM tags and then generate the sample to sm tag dic
#get_all_sm_tag = lambda x: get_sm_tag(x)
#smList = list(map(get_all_sm_tag, bamList))

#read in the samples table and create map
samplesTable = read_samplesFile("../config/samples.txt")
sampleList = samplesTable['sampleID']
sample2bam =  dict(zip(samplesTable['sampleID'], samplesTable['bam']))
sample2bamIndex = dict(zip(samplesTable['sampleID'], samplesTable['index']))
sample2sm =  dict(zip(sampleList, sampleList))
num_of_samples = len(sampleList)


# read in chromosome list from reference dict file (assumes the dict is already created)
# this circumvents the issue of whether to use hg19-style or b37-style chromosome annotation
# as it just pulls the chromosome names directly from the dict index.
chromList = get_chrom_names(dictionaryFile, bedFile)

#including preprocessing rules
include: "rules/Snakefile_preprocess"

if strelka2_mode:
    include: 'rules/Snakefile_Strelka2'
    rule all:
        input:
            'strelka2/genotyped/strelka2_variants.vcf.gz'

if hc_mode:
    include: 'rules/Snakefile_HaplotypeCaller'
    rule all:
        input:
            'HaplotypeCaller/genotyped/HC_variants.vcf.gz'

if dv_mode:
    include: 'rules/Snakefile_DeepVariant'
    rule all:
        input:
            expand('deepVariant/called/vcfs/{sample}_all_chroms.vcf.gz', sample=sampleList) if by_chrom else expand('deepVariant/called_by_sample/{sample}.vcf.gz', sample=sampleList),
            'deepVariant/genotyped/DV_variants.vcf.gz'
            

if har_mode:
    include: 'rules/Snakefile_harmonize'
    rule all:
        input:
            'ensemble/all_callers_merged_genotypes.vcf.gz',
            'ensemble/all_callers_merged_genotypes.vcf.gz.tbi'

